(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{"+oCj":function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return s})),a.d(t,"default",(function(){return b}));var r=a("k0FJ"),n=a("oedh"),o=(a("mXGw"),a("/FXl")),i=a("TjRS"),s=(a("aD51"),{});void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/installation/heroku.mdx"}});var c={_frontmatter:s},l=i.a;function b(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(o.b)(l,Object(r.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Running sorry-cypress on Heroku is the cheapest option. It is free when using free dynos. Follow the instructions below to setup the service on Heroku platform."),Object(o.b)("h2",{id:"running-a-stateless-director-service"},"Running a stateless director service"),Object(o.b)("p",null,"Click the button below to deploy the basic, in-memory configuration of ",Object(o.b)("inlineCode",{parentName:"p"},"director")," to Heroku:"),Object(o.b)("a",{href:"https://heroku.com/deploy?template=https://github.com/agoldis/sorry-cypress/tree/master",target:"_blank"},Object(o.b)("img",{src:"https://www.herokucdn.com/deploy/button.svg",alt:"Deploy"})),Object(o.b)("h2",{id:"running-a-stateful-director-service"},"Running a stateful director service"),Object(o.b)("p",null,"Download and install the ",Object(o.b)("a",{href:"https://devcenter.heroku.com/articles/heroku-cli",parentName:"p"},"Heroku CLI"),"."),Object(o.b)("p",null,"You must have Docker set up locally to continue. You should see output when you run this command."),Object(o.b)("pre",null,Object(o.b)("code",{className:"language-bash",parentName:"pre"},"$ docker ps\n")),Object(o.b)("h3",{id:"overview"},"Overview"),Object(o.b)("p",null,"We'll create 3 separate Heroku applications - one for each service. Publicly available docker images of 3 services are available at:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{href:"https://hub.docker.com/repository/docker/agoldis/sorry-cypress-director",parentName:"li"},"https://hub.docker.com/repository/docker/agoldis/sorry-cypress-director")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{href:"https://hub.docker.com/repository/docker/agoldis/sorry-cypress-api",parentName:"li"},"https://hub.docker.com/repository/docker/agoldis/sorry-cypress-api")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{href:"https://hub.docker.com/repository/docker/agoldis/sorry-cypress-dashboard",parentName:"li"},"https://hub.docker.com/repository/docker/agoldis/sorry-cypress-dashboard"))),Object(o.b)("p",null,"The images are automatically updated on each release and tagged in accordance with GitHub releases."),Object(o.b)("p",null,"In addition, sorry-cypress uses MongoDB as a persistance layer for storing and retreiving test results. We'll use a free ",Object(o.b)("inlineCode",{parentName:"p"},"mLab")," hosted solution to run a managed instance of MongoDB."),Object(o.b)("h3",{id:"creating-director-service"},"Creating ",Object(o.b)("inlineCode",{parentName:"h3"},"director")," service"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Create a new application and give it a good name, note the name, you'll need it later:")),Object(o.b)("img",{src:"https://s3.amazonaws.com/agoldis.dev/sorry-cypress/heroku/director/001.png"}),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Add ",Object(o.b)("inlineCode",{parentName:"li"},"mLab")," free-tier MongoDB add-on")),Object(o.b)("img",{src:"https://s3.amazonaws.com/agoldis.dev/sorry-cypress/heroku/director/002.png"}),Object(o.b)("img",{src:"https://s3.amazonaws.com/agoldis.dev/sorry-cypress/heroku/director/003.png"}),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},'Set application deployment type to "Container Registry"')),Object(o.b)("img",{src:"https://s3.amazonaws.com/agoldis.dev/sorry-cypress/heroku/director/004.png"}),Object(o.b)("p",null,"Now we'll run shell commands to deploy the ",Object(o.b)("inlineCode",{parentName:"p"},"director")," service"),Object(o.b)("pre",null,Object(o.b)("code",{className:"language-bash",parentName:"pre"},"# Sign into Heroku Container Registry.\n$ heroku container:login\n\n# Pull director service image\n$ docker pull agoldis/director:latest\n\n# Tag director service image as Heroku app image\n$ docker tag agoldis/director:latest registry.heroku.com/<name_of_director_app>/web\n\n# Push the image to Heroku Container Registry\n$ docker push registry.heroku.com/<name_of_director_app>/web\n\n# Deploy the image\n$ heroku container:release --app <name_of_director_app> web\n")),Object(o.b)("h3",{id:"creating-api-service"},"Creating ",Object(o.b)("inlineCode",{parentName:"h3"},"api")," service"),Object(o.b)("p",null,"Repeat the steps for ",Object(o.b)("inlineCode",{parentName:"p"},"director")," service, use different Heroku application name. There's no need to add ",Object(o.b)("inlineCode",{parentName:"p"},"mLab")," add-on for ",Object(o.b)("inlineCode",{parentName:"p"},"api"),"."),Object(o.b)("p",null,"Run the next commands to deploy ",Object(o.b)("inlineCode",{parentName:"p"},"api")," service to Heroku:"),Object(o.b)("pre",null,Object(o.b)("code",{className:"language-bash",parentName:"pre"},"# Sign into Heroku Container Registry.\n$ heroku container:login\n\n# Pull director service image\n$ docker pull agoldis/api:latest\n\n# Tag director service image as Heroku app image\n$ docker tag agoldis/api:latest registry.heroku.com/<name_of_api_app>/web\n\n# Push the image to Heroku Container Registry\n$ docker push registry.heroku.com/<name_of_api_app>/web\n\n# Deploy the image\n$ heroku container:release --app <name_of_api_app> web\n")),Object(o.b)("h3",{id:"creating-dashboard-service"},"Creating ",Object(o.b)("inlineCode",{parentName:"h3"},"dashboard")," service"),Object(o.b)("p",null,"Repeat the steps for ",Object(o.b)("inlineCode",{parentName:"p"},"director")," service, use different heroku application name. There's no need to add ",Object(o.b)("inlineCode",{parentName:"p"},"mLab")," add-on for ",Object(o.b)("inlineCode",{parentName:"p"},"dashboard"),"."),Object(o.b)("p",null,"Run the next commands to deploy ",Object(o.b)("inlineCode",{parentName:"p"},"dashboard")," service to Heroku:"),Object(o.b)("pre",null,Object(o.b)("code",{className:"language-bash",parentName:"pre"},"# Sign into Heroku Container Registry.\n$ heroku container:login\n\n# Pull director service image\n$ docker pull agoldis/dashboard:latest\n\n# Tag director service image as Heroku app image\n$ docker tag agoldis/dashboard:latest registry.heroku.com/<name_of_dashboard_app>/web\n\n# Push the image to Heroku Container Registry\n$ docker push registry.heroku.com/<name_of_dashboard_app>/web\n\n# Deploy the image\n$ heroku container:release --app <name_of_dashboard_app> web\n")),Object(o.b)("h3",{id:"configure-tha-apps-to-communicate"},"Configure tha apps to communicate"),Object(o.b)("p",null,"Set the following configuration variables for created applications:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"For ",Object(o.b)("inlineCode",{parentName:"li"},"director"),":")),Object(o.b)("pre",null,Object(o.b)("code",{className:"language-bash",parentName:"pre"},'# Use stateful mode and keep test results in MongoDB\nEXECUTION_DRIVER="../execution/mongo/driver"\n\n# Dashboard app url\nDASHBOARD_URL=<dashboard_app_url>\n\n# MongoDB database name\nMONGODB_DATABASE=<mLab_database_name>\n\n# MongoDB connection string\nMONGODB_URI=<mLab_database_access_credentials>\n\n# If you\'ve set up S3 bucket for keeping screenshots\n# Screenshots driver path\nSCREENSHOTS_DRIVER="../screenshots/s3.driver"\n\n# S3 Bucket name\nS3_BUCKET="bucket_name"\n# AWS credentials with write access to S3 bucket\nAWS_ACCESS_KEY_ID="key_id"\nAWS_SECRET_ACCESS_KEY="secret_access"\n')),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"For ",Object(o.b)("inlineCode",{parentName:"li"},"api"))),Object(o.b)("pre",null,Object(o.b)("code",{className:"language-bash",parentName:"pre"},"# MongoDB database name\nMONGODB_DATABASE=<mLab_database_name>\n\n# MongoDB connection string\nMONGODB_URI=<mLab_database_access_credentials>\n")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"For ",Object(o.b)("inlineCode",{parentName:"li"},"dashboard"))),Object(o.b)("pre",null,Object(o.b)("code",{className:"language-bash",parentName:"pre"},"# For communicating with API\nGRAPHQL_SCHEMA_URL=<api_app_url>\n")),Object(o.b)("h3",{id:"summary"},"Summary"),Object(o.b)("p",null,"That's it ðŸŽ‰!"),Object(o.b)("p",null,Object(o.b)("a",{href:"/cypress-agent#cypress-agent-configuration",parentName:"p"},"Reconfigure cypress agents"),' and try to run some tests. You will see test results accessing "dashboard" app URL.'),Object(o.b)("h3",{id:"optional-set-up-s3-bucket-to-keep-screenshots"},"Optional: Set up S3 bucket to keep screenshots"),Object(o.b)("p",null,"Follow ",Object(o.b)("a",{href:"https://github.com/agoldis/sorry-cypress/wiki/S3-screenshot-bucket-setup-instructions",parentName:"p"},"https://github.com/agoldis/sorry-cypress/wiki/S3-screenshot-bucket-setup-instructions")))}void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/installation/heroku.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-installation-heroku-mdx-e46cdb8de8aba722dbcb.js.map