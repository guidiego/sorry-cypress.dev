(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{hJmu:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return o})),n.d(t,"default",(function(){return s}));var a=n("k0FJ"),r=n("oedh"),i=(n("mXGw"),n("/FXl")),c=n("TjRS"),o=(n("aD51"),{});void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/development.mdx"}});var b={_frontmatter:o},l=c.a;function s(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)(l,Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"setup"},"Setup"),Object(i.b)("p",null,"The project uses ",Object(i.b)("a",{href:"https://yarnpkg.com/lang/en/docs/workspaces/",parentName:"p"},"yarn workspaces"),". Install dependecies by running ",Object(i.b)("inlineCode",{parentName:"p"},"yarn")," in the root directory."),Object(i.b)("h2",{id:"services-development"},"Services Development"),Object(i.b)("p",null,"Use different terminals to run each package in ",Object(i.b)("inlineCode",{parentName:"p"},"watch")," mode."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"yarn dev\n")),Object(i.b)("h2",{id:"using-docker-compose"},"Using docker-compose"),Object(i.b)("p",null,"The project uses ",Object(i.b)("inlineCode",{parentName:"p"},"docker-compose")," to conveniently run backend services in dockerized containers, during development as well."),Object(i.b)("p",null,"It is recommended to use ",Object(i.b)("inlineCode",{parentName:"p"},"docker-compose")," to run the backend services (",Object(i.b)("inlineCode",{parentName:"p"},"director")," and ",Object(i.b)("inlineCode",{parentName:"p"},"api"),") in watch mode."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"dashboard")," is less convenient to develop in a docker, it is more effective to run it on host machine."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Run ",Object(i.b)("inlineCode",{parentName:"li"},"docker-compose build")," from the project's root directory"),Object(i.b)("li",{parentName:"ul"},"Run ",Object(i.b)("inlineCode",{parentName:"li"},"docker-compose up")," to start the services")),Object(i.b)("p",null,"The latter command will create 3 services:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"MongoDB instance on port ",Object(i.b)("inlineCode",{parentName:"li"},"27017")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"director")," service on port ",Object(i.b)("inlineCode",{parentName:"li"},"1234")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"api")," service on ",Object(i.b)("inlineCode",{parentName:"li"},"4000"))),Object(i.b)("p",null,"You can change the configuration using the environment variables defined in ",Object(i.b)("inlineCode",{parentName:"p"},"docker-compose.yml")," file."),Object(i.b)("h2",{id:"behind-the-scenes"},"Behind the scenes"),Object(i.b)("p",null,"API and Dashboard are straightforward GraphQL and ReactJS implementations. Director implements the next flow:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Each cypress agent (machine) sends the same initial request with:")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"specs lists"),Object(i.b)("li",{parentName:"ul"},"machine hardware details"),Object(i.b)("li",{parentName:"ul"},"git commit details"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"--ci-build-id")," and other CLI parameters")),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"The ",Object(i.b)("inlineCode",{parentName:"p"},"director")," fetches (or creates a new ) ",Object(i.b)("inlineCode",{parentName:"p"},"run")," based on the parameters and responds with a randomly generated ",Object(i.b)("inlineCode",{parentName:"p"},"machineId")," and the ",Object(i.b)("inlineCode",{parentName:"p"},"runId"),".")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Each cypress client requests a next available task for the ",Object(i.b)("inlineCode",{parentName:"p"},"runId")," which was returned previously")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"The service looks at the list of tests and returns next available test, marks the returned test as ",Object(i.b)("inlineCode",{parentName:"p"},"claimed"))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Cypress agent runs the test and reports the results to ",Object(i.b)("inlineCode",{parentName:"p"},"director"))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Director persists the results and return upload URLs for storing screenshots and videos.")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},'When there\'re no more available tests, director returns an "empty" response - cypress agent halts execution'))))}void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/development.mdx"}}),s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-development-mdx-33f9d0f695185b2e6814.js.map