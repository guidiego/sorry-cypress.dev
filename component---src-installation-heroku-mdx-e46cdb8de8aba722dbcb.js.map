{"version":3,"sources":["webpack:///../src/installation/heroku.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","href","target","src","alt","isMDXComponent"],"mappings":"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","file":"component---src-installation-heroku-mdx-e46cdb8de8aba722dbcb.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/sorry-cypress.dev/sorry-cypress.dev/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Running sorry-cypress on Heroku is the cheapest option. It is free when using free dynos. Follow the instructions below to setup the service on Heroku platform.`}</p>\n    <h2 {...{\n      \"id\": \"running-a-stateless-director-service\"\n    }}>{`Running a stateless director service`}</h2>\n    <p>{`Click the button below to deploy the basic, in-memory configuration of `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`director`}</inlineCode>\n      {` to Heroku:`}</p>\n    <a href=\"https://heroku.com/deploy?template=https://github.com/agoldis/sorry-cypress/tree/master\" target=\"_blank\">\n      <img src=\"https://www.herokucdn.com/deploy/button.svg\" alt=\"Deploy\" />\n    </a>\n    <h2 {...{\n      \"id\": \"running-a-stateful-director-service\"\n    }}>{`Running a stateful director service`}</h2>\n    <p>{`Download and install the `}\n      <a {...{\n        \"href\": \"https://devcenter.heroku.com/articles/heroku-cli\",\n        \"parentName\": \"p\"\n      }}>{`Heroku CLI`}</a>\n      {`.`}</p>\n    <p>{`You must have Docker set up locally to continue. You should see output when you run this command.`}</p>\n    <pre><code {...{\n        \"className\": \"language-bash\",\n        \"parentName\": \"pre\"\n      }}>{`$ docker ps\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h3>\n    <p>{`We'll create 3 separate Heroku applications - one for each service. Publicly available docker images of 3 services are available at:`}</p>\n    <ul>\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}><a {...{\n          \"href\": \"https://hub.docker.com/repository/docker/agoldis/sorry-cypress-director\",\n          \"parentName\": \"li\"\n        }}>{`https://hub.docker.com/repository/docker/agoldis/sorry-cypress-director`}</a></li>\n\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}><a {...{\n          \"href\": \"https://hub.docker.com/repository/docker/agoldis/sorry-cypress-api\",\n          \"parentName\": \"li\"\n        }}>{`https://hub.docker.com/repository/docker/agoldis/sorry-cypress-api`}</a></li>\n\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}><a {...{\n          \"href\": \"https://hub.docker.com/repository/docker/agoldis/sorry-cypress-dashboard\",\n          \"parentName\": \"li\"\n        }}>{`https://hub.docker.com/repository/docker/agoldis/sorry-cypress-dashboard`}</a></li>\n\n    </ul>\n    <p>{`The images are automatically updated on each release and tagged in accordance with GitHub releases.`}</p>\n    <p>{`In addition, sorry-cypress uses MongoDB as a persistance layer for storing and retreiving test results. We'll use a free `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`mLab`}</inlineCode>\n      {` hosted solution to run a managed instance of MongoDB.`}</p>\n    <h3 {...{\n      \"id\": \"creating-director-service\"\n    }}>{`Creating `}\n      <inlineCode {...{\n        \"parentName\": \"h3\"\n      }}>{`director`}</inlineCode>\n      {` service`}</h3>\n    <ul>\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>{`Create a new application and give it a good name, note the name, you'll need it later:`}</li>\n\n    </ul>\n    <img src=\"https://s3.amazonaws.com/agoldis.dev/sorry-cypress/heroku/director/001.png\" />\n    <ul>\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>{`Add `}\n        <inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`mLab`}</inlineCode>\n        {` free-tier MongoDB add-on`}</li>\n\n    </ul>\n    <img src=\"https://s3.amazonaws.com/agoldis.dev/sorry-cypress/heroku/director/002.png\" />\n    <img src=\"https://s3.amazonaws.com/agoldis.dev/sorry-cypress/heroku/director/003.png\" />\n    <ul>\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>{`Set application deployment type to \"Container Registry\"`}</li>\n\n    </ul>\n    <img src=\"https://s3.amazonaws.com/agoldis.dev/sorry-cypress/heroku/director/004.png\" />\n    <p>{`Now we'll run shell commands to deploy the `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`director`}</inlineCode>\n      {` service`}</p>\n    <pre><code {...{\n        \"className\": \"language-bash\",\n        \"parentName\": \"pre\"\n      }}>{`# Sign into Heroku Container Registry.\n$ heroku container:login\n\n# Pull director service image\n$ docker pull agoldis/director:latest\n\n# Tag director service image as Heroku app image\n$ docker tag agoldis/director:latest registry.heroku.com/<name_of_director_app>/web\n\n# Push the image to Heroku Container Registry\n$ docker push registry.heroku.com/<name_of_director_app>/web\n\n# Deploy the image\n$ heroku container:release --app <name_of_director_app> web\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"creating-api-service\"\n    }}>{`Creating `}\n      <inlineCode {...{\n        \"parentName\": \"h3\"\n      }}>{`api`}</inlineCode>\n      {` service`}</h3>\n    <p>{`Repeat the steps for `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`director`}</inlineCode>\n      {` service, use different Heroku application name. There's no need to add `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`mLab`}</inlineCode>\n      {` add-on for `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`api`}</inlineCode>\n      {`.`}</p>\n    <p>{`Run the next commands to deploy `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`api`}</inlineCode>\n      {` service to Heroku:`}</p>\n    <pre><code {...{\n        \"className\": \"language-bash\",\n        \"parentName\": \"pre\"\n      }}>{`# Sign into Heroku Container Registry.\n$ heroku container:login\n\n# Pull director service image\n$ docker pull agoldis/api:latest\n\n# Tag director service image as Heroku app image\n$ docker tag agoldis/api:latest registry.heroku.com/<name_of_api_app>/web\n\n# Push the image to Heroku Container Registry\n$ docker push registry.heroku.com/<name_of_api_app>/web\n\n# Deploy the image\n$ heroku container:release --app <name_of_api_app> web\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"creating-dashboard-service\"\n    }}>{`Creating `}\n      <inlineCode {...{\n        \"parentName\": \"h3\"\n      }}>{`dashboard`}</inlineCode>\n      {` service`}</h3>\n    <p>{`Repeat the steps for `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`director`}</inlineCode>\n      {` service, use different heroku application name. There's no need to add `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`mLab`}</inlineCode>\n      {` add-on for `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`dashboard`}</inlineCode>\n      {`.`}</p>\n    <p>{`Run the next commands to deploy `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`dashboard`}</inlineCode>\n      {` service to Heroku:`}</p>\n    <pre><code {...{\n        \"className\": \"language-bash\",\n        \"parentName\": \"pre\"\n      }}>{`# Sign into Heroku Container Registry.\n$ heroku container:login\n\n# Pull director service image\n$ docker pull agoldis/dashboard:latest\n\n# Tag director service image as Heroku app image\n$ docker tag agoldis/dashboard:latest registry.heroku.com/<name_of_dashboard_app>/web\n\n# Push the image to Heroku Container Registry\n$ docker push registry.heroku.com/<name_of_dashboard_app>/web\n\n# Deploy the image\n$ heroku container:release --app <name_of_dashboard_app> web\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"configure-tha-apps-to-communicate\"\n    }}>{`Configure tha apps to communicate`}</h3>\n    <p>{`Set the following configuration variables for created applications:`}</p>\n    <ul>\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>{`For `}\n        <inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`director`}</inlineCode>\n        {`:`}</li>\n\n    </ul>\n    <pre><code {...{\n        \"className\": \"language-bash\",\n        \"parentName\": \"pre\"\n      }}>{`# Use stateful mode and keep test results in MongoDB\nEXECUTION_DRIVER=\"../execution/mongo/driver\"\n\n# Dashboard app url\nDASHBOARD_URL=<dashboard_app_url>\n\n# MongoDB database name\nMONGODB_DATABASE=<mLab_database_name>\n\n# MongoDB connection string\nMONGODB_URI=<mLab_database_access_credentials>\n\n# If you've set up S3 bucket for keeping screenshots\n# Screenshots driver path\nSCREENSHOTS_DRIVER=\"../screenshots/s3.driver\"\n\n# S3 Bucket name\nS3_BUCKET=\"bucket_name\"\n# AWS credentials with write access to S3 bucket\nAWS_ACCESS_KEY_ID=\"key_id\"\nAWS_SECRET_ACCESS_KEY=\"secret_access\"\n`}</code></pre>\n    <ul>\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>{`For `}\n        <inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`api`}</inlineCode></li>\n\n    </ul>\n    <pre><code {...{\n        \"className\": \"language-bash\",\n        \"parentName\": \"pre\"\n      }}>{`# MongoDB database name\nMONGODB_DATABASE=<mLab_database_name>\n\n# MongoDB connection string\nMONGODB_URI=<mLab_database_access_credentials>\n`}</code></pre>\n    <ul>\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>{`For `}\n        <inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`dashboard`}</inlineCode></li>\n\n    </ul>\n    <pre><code {...{\n        \"className\": \"language-bash\",\n        \"parentName\": \"pre\"\n      }}>{`# For communicating with API\nGRAPHQL_SCHEMA_URL=<api_app_url>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"summary\"\n    }}>{`Summary`}</h3>\n    <p>{`That's it 🎉!`}</p>\n    <p><a {...{\n        \"href\": \"/cypress-agent#cypress-agent-configuration\",\n        \"parentName\": \"p\"\n      }}>{`Reconfigure cypress agents`}</a>\n      {` and try to run some tests. You will see test results accessing \"dashboard\" app URL.`}</p>\n    <h3 {...{\n      \"id\": \"optional-set-up-s3-bucket-to-keep-screenshots\"\n    }}>{`Optional: Set up S3 bucket to keep screenshots`}</h3>\n    <p>{`Follow `}\n      <a {...{\n        \"href\": \"https://github.com/agoldis/sorry-cypress/wiki/S3-screenshot-bucket-setup-instructions\",\n        \"parentName\": \"p\"\n      }}>{`https://github.com/agoldis/sorry-cypress/wiki/S3-screenshot-bucket-setup-instructions`}</a></p>\n\n  </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}